<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xsi:schemaLocation="
        http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context
        http://www.springframework.org/schema/context/spring-context.xsd
        http://www.springframework.org/schema/mvc
        http://www.springframework.org/schema/mvc/spring-mvc.xsd">

    <!--处理器映射器-->
    <!--<bean class="org.springframework.web.servlet.handler.BeanNameUrlHandlerMapping"/>-->
    <!--<bean class="org.springframework.web.servlet.handler.SimpleUrlHandlerMapping">-->
        <!--<property name="mappings">-->
            <!--<props>-->
                <!--<prop key="/person.action">person1</prop>-->
            <!--</props>-->
        <!--</property>-->
    <!--</bean>-->

    <!--处理器适配器-->
    <!--<bean class="org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter"/>-->
    <!--<bean class="org.springframework.web.servlet.mvc.HttpRequestHandlerAdapter"/>-->

    <!--创建后端控制器类实现Controller接口-->
    <!--配置后端控制器bean-->
    <bean id="/userlist.action" class="webssm.controller.OffcnHelloController"/>
    <bean id="/handler.action" class="webssm.controller.OffcnHelloController2"/>
    <!--<bean id="person1" class="webssm.controller.PersonController"></bean>-->
    <!--视图解析器-->
    <!--<bean class="org.springframework.web.servlet.view.InternalResourceViewResolver"/>-->


    <!--**************************************************************************************************-->
    <!--在 WEB 容器启动的时候会在上下文中定义一个 DefaultServletHttpRequestHandler，
    它会对DispatcherServlet的请求进行处理，如果该请求已经作了映射，
    那么会接着交给后台对应的处理程序，如果没有作映射，
    就交给 WEB 应用服务器默认的 Servlet 处理，从而找到对应的静态资源，只有再找不到资源时才会报错。
-->
    <!--<mvc:default-servlet-handler/>-->

<!-- 本配置文件是工名为mvc-dispatcher的DispatcherServlet使用， 提供其相关的Spring MVC配置 -->

    <!-- 启用Spring基于annotation的DI, 使用户可以在Spring MVC中使用Spring的强大功能。 激活 @Required
        @Autowired,JSR 250's @PostConstruct, @PreDestroy and @Resource 等标注 -->
    <context:annotation-config />

    <!-- DispatcherServlet上下文， 只管理@Controller类型的bean， 忽略其他型的bean, 如@Service -->
    <context:component-scan base-package="webssm" use-default-filters="false">
    <context:include-filter type="annotation"
                            expression="org.springframework.stereotype.Controller" />
</context:component-scan>

    <!---->
    <!-- HandlerMapping, 无需配置， Spring MVC可以默认启动。 DefaultAnnotationHandlerMapping
        annotation-driven HandlerMapping -->

    <!-- 扩充了注解驱动，可以将请求参数绑定到控制器参数  启用mvc驱动-->
    <!--<mvc:annotation-driven/>-->

    <!-- 静态资源处理， css， js， imgs -->
    <mvc:resources mapping="/resources/**" location="/resources/" />


    <!-- 配置ViewResolver。 可以用多个ViewResolver。 使用order属性排序。 InternalResourceViewResolver放在最后。 -->
    <bean
            class="org.springframework.web.servlet.view.ContentNegotiatingViewResolver">
        <property name="order" value="1" />
        <property name="mediaTypes">
            <map>
                <entry key="json" value="application/json" />
                <entry key="xml" value="application/xml" />
                <entry key="htm" value="text/html" />
            </map>
        </property>

        <property name="defaultViews">
            <list>
                <!-- JSON View -->
                <bean
                        class="org.springframework.web.servlet.view.json.MappingJackson2JsonView">
                </bean>
            </list>
        </property>
        <property name="ignoreAcceptHeader" value="true" />
    </bean>

    <bean
            class="org.springframework.web.servlet.view.InternalResourceViewResolver">
        <property name="viewClass"
                  value="org.springframework.web.servlet.view.JstlView" />
        <property name="prefix" value="/WEB-INF/jsps/" />
        <property name="suffix" value=".jsp" />
    </bean>

    <!--配置自定义视图   在springboot项目进行过测试-->
    <!--<bean class="org.springframework.web.servlet.view.BeanNameViewResolver">-->
        <!--<property name="order" value="3" />-->
    <!--</bean>-->


    <!--200*1024*1024即200M resolveLazily属性启用是为了推迟文件解析，以便捕获文件大小异常 -->
    <!--解析器依赖comments-fileupload.jar包和comments-io.jar包-->
    <bean id="multipartResolver"
          class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
        <property name="maxUploadSize" value="209715200" />
        <property name="defaultEncoding" value="UTF-8" />
        <property name="resolveLazily" value="true" />
    </bean>




    <!--开启spring mvc 的各种解析器适配器-->
    <mvc:annotation-driven conversion-service="conversionService" validator="validator"/>
<bean id="conversionService" class="org.springframework.format.support.FormattingConversionServiceFactoryBean">
   <property name="converters">
       <list>
           <bean class="webssm.conversion.DateConvertor"></bean>
       </list>
  </property>
</bean>


    <!-- 添加校验器，但是需要注意要配置的是一个校验器工厂，
	工厂中添加具体的实现校验的校验器 -->
    <bean id="validator" class="org.springframework.validation.beanvalidation.LocalValidatorFactoryBean">
        <!-- 工厂中实现校验的校验器 -->
        <property name="providerClass" value="org.hibernate.validator.HibernateValidator"></property>
        <!-- 将读取配置文件信息的bean加入到工厂中 -->
        <property name="validationMessageSource" ref="messageSource"></property>
    </bean>

    <!-- 读取配置文件 -->
    <bean id="messageSource" class="org.springframework.context.support.ReloadableResourceBundleMessageSource">
        <property name="basenames">
            <list>
                <value>classpath:resource/ValidatorMessage.properties</value>
            </list>
        </property>
        <!-- 资源文件编码格式 -->
        <property name="fileEncodings" value="utf-8"></property>
        <!-- 对资源文件内容缓存时间，单位秒 -->
        <property name="cacheSeconds" value="120"></property>
    </bean>

<!--*******************拦截器配置************************-->
    <!--对某些请求做拦截-->
    <!--对所有请求进行拦截-->
    <mvc:interceptors>
        <mvc:interceptor>
            <mvc:mapping path="/**"/>
            <bean class="webssm.interceptor.LoginInterceptor"/>
        </mvc:interceptor>
    </mvc:interceptors>





</beans>