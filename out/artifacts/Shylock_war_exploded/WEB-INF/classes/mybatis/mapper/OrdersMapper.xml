<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="mybatis.mapper.OrdersMapper" >

  <!--开启mapper级的二级缓存-->
  <cache/>

  <!--orders and user reflection-->
<resultMap id="OrdersUserResultMap" type="mybatis.po.Orders">
  <!-- 配置映射的订单信息 -->
  <!-- id：指定查询列中的唯 一标识，订单信息的中的唯 一标识，如果有多个列组成唯一标识，配置多个id
      column：订单信息的唯 一标识 列
      property：订单信息的唯 一标识 列所映射到Orders中哪个属性
    -->
  <id column="id" property="id"/>
  <result column="user_id" property="userId"/>
  <result column="number" property="number"/>
  <result column="createtime" property="createtime"/>
  <result column="note" property="note"/>

  <!-- 配置映射的关联的用户信息 -->
  <!-- association：用于映射关联查询单个对象的信息
  property：要将关联查询的用户信息映射到Orders中哪个属性
   -->
  <association property="user" javaType="mybatis.po.User">
    <!-- id：关联查询用户的唯 一标识
      column：指定唯 一标识用户信息的列
      javaType：映射到user的哪个属性
       -->
    <id column="user_id" property="id"/>
    <result column="username" property="username"/>
    <result column="sex" property="sex"/>
    <result column="address" property="address"/>
  </association>
</resultMap>
  
  <resultMap id="OrdersAndOrderDetailResultMap" type="mybatis.po.Orders" extends="OrdersUserResultMap">
    <!-- 订单信息 -->
    <!-- 用户信息 -->
    <!-- 使用extends继承，不用在中配置订单信息和用户信息的映射 -->

    <!-- 订单明细信息
		一个订单关联查询出了多条明细，要使用collection进行映射
		collection：对关联查询到多条记录映射到集合对象中
		property：将关联查询到多条记录映射到cn.itcast.mybatis.po.Orders哪个属性
		ofType：指定映射到list集合属性中pojo的类型
		 -->

    <collection property="orderdetails" ofType="mybatis.po.Orderdetail">
      <!-- id：订单明细唯 一标识
		 	property:要将订单明细的唯 一标识 映射到cn.itcast.mybatis.po.Orderdetail的哪个属性
		 	  -->
      <id column="orderdetail_id" property="id"/>
      <result column="items_id" property="itemsId"/>
      <result column="items_num" property="itemsNum"/>
      <result column="orders_id" property="ordersId"/>
    </collection>

  </resultMap>


  <!-- 延迟加载的resultMap -->
  <resultMap type="mybatis.po.Orders" id="OrdersUserLazyLoadingResultMap">
    <!--对订单信息进行映射配置  -->
    <id column="id" property="id"/>
    <result column="user_id" property="userId"/>
    <result column="number" property="number"/>
    <result column="createtime" property="createtime"/>
    <result column="note" property="note"/>
    <!-- 实现对用户信息进行延迟加载
    select：指定延迟加载需要执行的statement的id（是根据user_id查询用户信息的statement）
    要使用userMapper.xml中findUserById完成根据用户id(user_id)用户信息的查询，如果findUserById不在本mapper中需要前边加namespace
    column：订单信息中关联用户信息查询的列，是user_id
    关联查询的sql理解为：
    SELECT orders.*,
(SELECT username FROM USER WHERE orders.user_id = user.id)username,
(SELECT sex FROM USER WHERE orders.user_id = user.id)sex
FROM orders
     -->
    <association property="user"  javaType="mybatis.po.User"
                 select="mybatis.mapper.UserMapper.findUserById" column="user_id">
      <!-- 实现对用户信息进行延迟加载 -->
    </association>




  </resultMap>


  

  <!--******************************resulMap*********************************-->
  <select id="findOrdersUserResultMap" resultMap="OrdersUserResultMap">
        <include refid="orders_user"/>
  </select>

  <select id="findOrdersAndOrderDetailResultMap" resultMap="OrdersAndOrderDetailResultMap">
    <include refid="orders_orderdetail"/>
  </select>


  <!-- 查询订单关联查询用户，用户信息需要延迟加载 -->
  <select id="findOrdersUserLazyLoading" resultMap="OrdersUserLazyLoadingResultMap">
    SELECT * FROM orders
  </select>


<!--******************************resulType*********************************-->
  <!--implement one to one association with resultType-->
  <select id="findOrdersUser" resultType="mybatis.po.OrdersCustom">
    <include refid="orders_user"/>
  </select>

  <!--********************sql statement*********************-->
  <!-- 查询订单对应的用户 一个订单只能有一个用户 但是一个用户可以有多个订单-->
  <sql id="orders_user">
    SELECT
    orders.*,
    USER.username,
    USER.sex,
    USER.address
    FROM
    orders,
    USER
    WHERE orders.user_id = user.id
  </sql>
  <!--查询订单和订单详情的sql  -->
  <sql id="orders_orderdetail">
    SELECT
    orders.*,
    USER.username,
    USER.sex,
    USER.address,
    orderdetail.id orderdetail_id,
    orderdetail.items_id,
    orderdetail.items_num,
    orderdetail.orders_id
    FROM
    orders,
    USER,
    orderdetail
    WHERE orders.user_id = user.id AND orderdetail.orders_id=orders.id
  </sql>

</mapper>